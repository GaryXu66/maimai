<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
    http://www.springframework.org/schema/tx  
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/context   
	http://www.springframework.org/schema/context/spring-context-3.0.xsd">
    
    <context:annotation-config/>
    <!-- 扫描指定的包及以下的包 在springMVC配置中扫描-->
	<!-- <context:component-scan base-package="maimai.app.controller"/> -->
    <context:component-scan base-package="maimai.app.service"/> 
    <context:component-scan base-package="maimai.app.dao"/>
    <context:component-scan base-package="maimai.app.redis"/>
    
    <!-- 加载properties文件  -->
	<context:property-placeholder location="classpath*:*.properties"/>
	
	<!-- druid datasource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${master1.jdbc.driverClassName}" />
		<property name="url" value="${master1.jdbc.url}" />
		<property name="username" value="${master1.jdbc.username}" />
		<property name="password" value="${master1.jdbc.password}" />
		<property name="filters" value="stat" />
		<property name="maxActive" value="20" /> 
		<property name="initialSize" value="1" />
		<property name="maxWait" value="60000" />
		<property name="minIdle" value="1" />
		<property name="timeBetweenEvictionRunsMillis" value="3000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	</bean>     	
	
	<!-- 使用JDBC事物 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 1.使用注解@Transactional 来管理事物 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 2.AOP配置事物 -->
	<!-- <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="query*"  propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="select*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>-->
	<!--配置AOP切面-->
	<!-- <aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.shove190.api.service.*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config> -->
	
	<!-- 集成Mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据源指定 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录 -->
		<property name="typeAliasesPackage" value="maimai.app.entity" />
		<!-- mybatis配置文件指定 -->
		<property  name="configLocation"  value="classpath:mybatis.xml"/>
		<!-- 显式指定Mapper.xml文件位置 -->
		<property name="mapperLocations" value="classpath:maimai/app/mapper/*Mapper.xml" />
	</bean>
	
	<!-- 配置SQLSession模板 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"  >
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->  
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
	    <property name="basePackage" value="maimai.app.dao" />
	</bean> 
	
	<!-- redis config -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxIdle" value="${redis.maxIdle}" />  
        <property name="maxActive" value="${redis.maxActive}" />  
        <property name="maxWait" value="${redis.maxWait}" />  
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>  
    </bean>  
      
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
    	<property name="hostName" value="${redis.host}"/>
    	<property name="port" value="${redis.port}"/>
    	<property name="password" value="${redis.pass}"/>
    	<property name="poolConfig" ref="poolConfig"/>
    </bean>
      
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">  
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <!-- redisTemplate采用默认的JdkSerializationRedisSerializer来进行序列化，保存的值看起来前面还带一串字符，
       	 在此我们定义使用StringRedisSerializer进行序列化，则保存的值看来就只是单纯的字符串 -->
        <property name="defaultSerializer">
	        <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
	    </property>
    </bean>
    
     <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">  
        <property name="connectionFactory" ref="jedisConnectionFactory" />  
    </bean>
    
    
    <!-- 直接采用jedisPool方式操作连接，需要手动管理连接的获取和释放 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${jedis.maxIdle}" />
		<property name="maxActive" value="${jedis.maxActive}" />
		<property name="testOnBorrow" value="${jedis.testOnBorrow}" />
	</bean>
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" />
		<constructor-arg name="host" value="${jedis.host}" />
		<constructor-arg name="port" value="${jedis.port}" type="int" />
		<constructor-arg name="timeout" value="${jedis.timeout}" type="int" />
		<constructor-arg name="password"><null/></constructor-arg>
		<constructor-arg name="database" value="${jedis.database}" type="int" />
	</bean>
	
	
	<!-- 支持上传文件 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"></property>
		<property name="maxUploadSize" value="5097152"></property>
		<property name="maxInMemorySize" value="5097152"></property>
	</bean>
</beans>    